diff a/AxiosTest.js b/AxiosTest.js	(rejected hunks)
@@ -36,80 +35,69 @@
             imageUri,
             imageType,
             imageName,
-        } = this.state;
-
-        const formData = new FormData();
-
-        const dto = { 
-            hostName: hostName,
+          } = this.state;
+    
+          const formData = new FormData();
+    
+          const dto = {
+            hostName,
             houseIntroduction: introText,
-            freeService: freeService,
-            phoneNumber: phoneNumber,
+            freeService,
+            phoneNumber,
             registrantId: 1,
             pricePerNight: Number(price.replace(/\D/g, '')),
-            address: address,
+            address,
             maxNumPeople: Number(maximumGuestNumber.replace(/\D/g, '')),
-        };
-
-        // formData.append("dto", JSON.stringify(dto));
-
-        const jsonString = JSON.stringify(dto);
-        const blob = await RNFetchBlob.polyfill.Blob.build(jsonString, { type: 'application/json;' });
-        console.log("Blob 생성 테스트: ", blob);
-        console.log("Blob Type: ", blob.type);
-        formData.append("dto", blob, 'dto.json');
-
-        this.state.imageUri.forEach((filePath, index) => {
-            console.log("filepath 제대로 추가되냐? " + filePath)
-            console.log("type 제대로 추가되냐? " + this.state.imageType)
-            console.log("name 제대로 추가되냐? " +this.state.imageName)
-            formData.append('photos', {
-                uri: filePath,
-                type: this.state.imageType,
-                name: this.state.imageName ,
+          };
+    
+          formData.append('dto', JSON.stringify(dto));
+    
+          const imagePromises = this.state.imageUri.map(async (filePath, index) => {
+            const base64 = await RNFetchBlob.fs.readFile(filePath, 'base64');
+            const blob = RNFetchBlob.polyfill.Blob.build(base64, { type: `${this.state.imageType};BASE64` });
+            const file = new File([blob], this.state.imageName || `image_${index}.jpg`, { type: this.state.imageType });
+            console.log('File details:', {
+              name: file.name,
+              type: file.type,
+              size: file.size,
             });
-        });
-
-        const token = await getToken(); 
-
-        const response = await axios({
-            method: "POST",
-            url: "http://223.130.131.166:8080/api/v1/house",
+            formData.append('photos', file);
+          });
+    
+          await Promise.all(imagePromises);
+    
+          // FormData 내용 출력
+          for (let pair of formData._parts) {
+            console.log(pair[0] + ': ' + JSON.stringify(pair[1]));
+          }
+    
+          const token = await getToken();
+    
+          const response = await axios({
+            method: 'POST',
+            url: 'http://223.130.131.166:8080/api/v1/house',
             data: formData,
             headers: {
-                'Authorization': `Bearer ${token}`,
-                'Content-Type': 'multipart/form-data', 
+              Authorization: `Bearer ${token}`,
+              'Content-Type': 'multipart/form-data',
             },
-        });
-        if (response.status === 401) {
-            token = await refreshAccessToken();
-
-            const response = await axios({
-                method: "POST",
-                url: "http://223.130.131.166:8080/api/v1/house",
-                data: formData,
-                headers: {
-                    'Authorization': `Bearer ${token}`,
-                    'Content-Type': 'multipart/form-data', 
-                },
-            });
-        }
-
-        console.log(response.data);
-        this.props.navigation.navigate('검색', { refresh: true });
-    } catch(error) {
-        console.log('숙소 데이터 보내는 도중 에러발생:', error);
-        if (error.response) {
+          });
+    
+          console.log(response.data);
+          this.props.navigation.navigate('검색', { refresh: true });
+        } catch (error) {
+          console.log('숙소 데이터 보내는 도중 에러발생:', error);
+          if (error.response) {
             console.log('Error status:', error.response.status);
             console.log('Error data:', error.response.data);
             console.log('Error headers:', error.response.headers);
-        } else if (error.request) {
+          } else if (error.request) {
             console.log('Request that triggered error:', error.request);
-        } else {
+          } else {
             console.log('Error message:', error.message);
+          }
         }
-    }
-}
+      }
 //////////////////////////////////////////////////////////////   
 
 
